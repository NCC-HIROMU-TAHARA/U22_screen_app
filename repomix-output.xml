This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
app/.gitignore
app/build.gradle.kts
app/proguard-rules.pro
app/src/androidTest/java/WTAY/screen_app_u22/ExampleInstrumentedTest.kt
app/src/main/AndroidManifest.xml
app/src/main/java/WTAY/screen_app_u22/AppPreferences.kt
app/src/main/java/WTAY/screen_app_u22/AppUsageDisplayItem.kt
app/src/main/java/WTAY/screen_app_u22/BootReceiver.kt
app/src/main/java/WTAY/screen_app_u22/DailyUsageDetailsActivity.kt
app/src/main/java/WTAY/screen_app_u22/db/AppDatabase.kt
app/src/main/java/WTAY/screen_app_u22/db/AppUsageDao.kt
app/src/main/java/WTAY/screen_app_u22/db/AppUsageEntity.kt
app/src/main/java/WTAY/screen_app_u22/MainActivity.kt
app/src/main/java/WTAY/screen_app_u22/MonthlyUsageDetailsActivity.kt
app/src/main/java/WTAY/screen_app_u22/ServiceState.kt
app/src/main/java/WTAY/screen_app_u22/ui/theme/Color.kt
app/src/main/java/WTAY/screen_app_u22/ui/theme/Theme.kt
app/src/main/java/WTAY/screen_app_u22/ui/theme/Type.kt
app/src/main/java/WTAY/screen_app_u22/UsageHighlightModels.kt
app/src/main/java/WTAY/screen_app_u22/UsageListAdapter.kt
app/src/main/java/WTAY/screen_app_u22/UsageStatsHelper.kt
app/src/main/java/WTAY/screen_app_u22/UsageTrackingService.kt
app/src/main/java/WTAY/screen_app_u22/WeeklyUsageDetailsActivity.kt
app/src/main/res/drawable/ic_add_24.xml
app/src/main/res/drawable/ic_arrow_back_24.xml
app/src/main/res/drawable/ic_event_note_24.xml
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/drawable/ic_notification_tracking_24.xml
app/src/main/res/drawable/ic_settings_24.xml
app/src/main/res/drawable/ic_update_24.xml
app/src/main/res/layout/activity_alert_settings.xml
app/src/main/res/layout/activity_daily_usage_details.xml
app/src/main/res/layout/activity_main.xml
app/src/main/res/layout/activity_monthly_usage_details.xml
app/src/main/res/layout/activity_weekly_usage_details.xml
app/src/main/res/layout/item_usage_stat.xml
app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi/ic_launcher.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/test/java/WTAY/screen_app_u22/ExampleUnitTest.kt
build.gradle.kts
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
settings.gradle.kts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/src/main/java/WTAY/screen_app_u22/ServiceState.kt">
package WTAY.screen_app_u22

object ServiceState {
    var isServiceRunning = false
}
</file>

<file path=".gitignore">
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties
</file>

<file path="app/.gitignore">
/build
</file>

<file path="app/proguard-rules.pro">
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile
</file>

<file path="app/src/androidTest/java/WTAY/screen_app_u22/ExampleInstrumentedTest.kt">
package WTAY.screen_app_u22

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("WTAY.screen_app_u22", appContext.packageName)
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/AppPreferences.kt">
// app/src/main/java/WTAY/screen_app_u22/AppPreferences.kt
package WTAY.screen_app_u22

import android.content.Context
import android.content.SharedPreferences

class AppPreferences(context: Context) {

    private val prefs: SharedPreferences =
        context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)

    companion object {
        private const val KEY_LAST_UPDATE = "last_cumulative_update_timestamp"
    }

    var lastUpdateTime: Long
        get() = prefs.getLong(KEY_LAST_UPDATE, 0L)
        set(value) = prefs.edit().putLong(KEY_LAST_UPDATE, value).apply()
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/BootReceiver.kt">
package WTAY.screen_app_u22

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Build

class BootReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        // 端末の起動が完了したときにサービスを開始する
        if (intent.action == Intent.ACTION_BOOT_COMPLETED) {
            val serviceIntent = Intent(context, UsageTrackingService::class.java)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                context.startForegroundService(serviceIntent)
            } else {
                context.startService(serviceIntent)
            }
        }
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/DailyUsageDetailsActivity.kt">
package WTAY.screen_app_u22

import com.google.android.material.appbar.MaterialToolbar
import android.content.pm.PackageManager
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import java.util.Calendar
import java.util.concurrent.TimeUnit

class DailyUsageDetailsActivity : AppCompatActivity() {

    private lateinit var usageHelper: UsageStatsHelper
    private lateinit var dailyUsageRecyclerView: RecyclerView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_daily_usage_details)

        val toolbar = findViewById<MaterialToolbar>(R.id.detailsToolbar)
        setSupportActionBar(toolbar)

        // ▼▼▼ タイトル設定を修正 ▼▼▼
        supportActionBar?.title = "今日のアプリ利用履歴"
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        usageHelper = UsageStatsHelper(this)
        dailyUsageRecyclerView = findViewById(R.id.dailyUsageRecyclerView)
        dailyUsageRecyclerView.layoutManager = LinearLayoutManager(this)

        displayDailyUsageDetails()
    }

    private fun displayDailyUsageDetails() {
        val endTime = System.currentTimeMillis()
        // ▼▼▼ 開始時刻を「今日の0時」に変更 ▼▼▼
        val calendar = Calendar.getInstance()
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        calendar.set(Calendar.MILLISECOND, 0)
        val startTime = calendar.timeInMillis

        val dailyStatsRaw = usageHelper.getAppUsageStats(startTime, endTime)
        val displayList = dailyStatsRaw.mapNotNull { stat ->
            getAppNameFromPackage(stat.packageName)?.let { appName ->
                AppUsageDisplayItem(stat.packageName, appName, stat.totalTimeInForeground)
            }
        }
            .filter { it.totalTimeInForeground > 0 }
            .sortedByDescending { it.totalTimeInForeground }

        val adapter = UsageListAdapter(this, displayList)
        dailyUsageRecyclerView.adapter = adapter
    }

    private fun getAppNameFromPackage(packageName: String): String? {
        return try {
            val packageManager = applicationContext.packageManager
            val applicationInfo = packageManager.getApplicationInfo(packageName, 0)
            packageManager.getApplicationLabel(applicationInfo).toString()
        } catch (e: PackageManager.NameNotFoundException) {
            null
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressedDispatcher.onBackPressed()
        return true
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/db/AppDatabase.kt">
// app/src/main/java/WTAY/screen_app_u22/db/AppDatabase.kt
package WTAY.screen_app_u22.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

@Database(entities = [AppUsageEntity::class], version = 1, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {

    abstract fun appUsageDao(): AppUsageDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getInstance(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "app_usage_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/db/AppUsageDao.kt">
package WTAY.screen_app_u22.db

import androidx.room.Dao
import androidx.room.Query
import androidx.room.Upsert

@Dao
interface AppUsageDao {

    @Upsert
    suspend fun upsertAll(appUsages: List<AppUsageEntity>)

    @Query("SELECT * FROM app_usage")
    suspend fun getAll(): List<AppUsageEntity>

    @Query("SELECT SUM(usageTime) FROM app_usage")
    suspend fun getTotalUsageTime(): Long

    // getAllをMap<String, Long>で返すヘルパーメソッド
    suspend fun getAllUsageMap(): Map<String, Long> {
        return getAll().associate { it.packageName to it.usageTime }
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/db/AppUsageEntity.kt">
package WTAY.screen_app_u22.db

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "app_usage")
data class AppUsageEntity(
    @PrimaryKey
    val packageName: String,
    val usageTime: Long
)
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/MonthlyUsageDetailsActivity.kt">
package WTAY.screen_app_u22

import android.content.pm.PackageManager
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.appbar.MaterialToolbar
import java.util.*

class MonthlyUsageDetailsActivity : AppCompatActivity() {

    private lateinit var usageHelper: UsageStatsHelper
    private lateinit var monthlyUsageRecyclerView: RecyclerView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_monthly_usage_details)

        val toolbar = findViewById<MaterialToolbar>(R.id.detailsToolbar)
        setSupportActionBar(toolbar)
        supportActionBar?.title = "今月のアプリ利用履歴"
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        usageHelper = UsageStatsHelper(this)
        monthlyUsageRecyclerView = findViewById(R.id.monthlyUsageRecyclerView)
        monthlyUsageRecyclerView.layoutManager = LinearLayoutManager(this)

        displayMonthlyUsageDetails()
    }

    private fun displayMonthlyUsageDetails() {
        val calendar = Calendar.getInstance()
        val endTime = System.currentTimeMillis()

        // 開始時刻を「今月の1日0時」に設定
        calendar.set(Calendar.DAY_OF_MONTH, 1)
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        calendar.set(Calendar.MILLISECOND, 0)
        val startTime = calendar.timeInMillis

        val dailyStatsOverMonth = usageHelper.getAppUsageStats(startTime, endTime)

        val monthlyAggregatedStats = mutableMapOf<String, Long>()
        dailyStatsOverMonth.forEach { stat ->
            val currentTotal = monthlyAggregatedStats.getOrDefault(stat.packageName, 0L)
            monthlyAggregatedStats[stat.packageName] = currentTotal + stat.totalTimeInForeground
        }

        val displayList = monthlyAggregatedStats.mapNotNull { entry ->
            getAppNameFromPackage(entry.key)?.let { appName ->
                AppUsageDisplayItem(entry.key, appName, entry.value)
            }
        }
            .filter { it.totalTimeInForeground > 0 }
            .sortedByDescending { it.totalTimeInForeground }

        val adapter = UsageListAdapter(this, displayList)
        monthlyUsageRecyclerView.adapter = adapter
    }

    private fun getAppNameFromPackage(packageName: String): String? {
        return try {
            val packageManager = applicationContext.packageManager
            val applicationInfo = packageManager.getApplicationInfo(packageName, 0)
            packageManager.getApplicationLabel(applicationInfo).toString()
        } catch (e: PackageManager.NameNotFoundException) {
            null
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressedDispatcher.onBackPressed()
        return true
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/ui/theme/Color.kt">
package WTAY.screen_app_u22.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/ui/theme/Theme.kt">
package WTAY.screen_app_u22.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun Screen_app_U22Theme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/ui/theme/Type.kt">
package WTAY.screen_app_u22.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/UsageHighlightModels.kt">
package WTAY.screen_app_u22

// 共通で使うアプリ情報
data class AppInfo(
    val packageName: String,
    val appName: String,
    val usageTime: Long = 0,
    val launchCount: Int = 0
)

// 時間帯ごとのトップ利用アプリ
data class TimeSlotUsage(
    val morning: AppInfo?,
    val day: AppInfo?,
    val night: AppInfo?
)

// 今日のハイライトをまとめるクラス
data class TodayHighlight(
    val mostLaunchedApp: AppInfo?,
    val timeSlotUsage: TimeSlotUsage
)
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/UsageTrackingService.kt">
package WTAY.screen_app_u22

import android.app.*
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import kotlinx.coroutines.*
import java.util.concurrent.TimeUnit

class UsageTrackingService : Service() {

    private val serviceScope = CoroutineScope(Dispatchers.IO + Job())
    private lateinit var usageHelper: UsageStatsHelper

    companion object {
        const val CHANNEL_ID = "UsageTrackingChannel"
        const val NOTIFICATION_ID = 1
        // ▼▼▼ このように変更 ▼▼▼
        private val TRACKING_INTERVAL_MINUTES = 60L
        private val TRACKING_INTERVAL_MS = TimeUnit.MINUTES.toMillis(TRACKING_INTERVAL_MINUTES)
    }

    override fun onCreate() {
        super.onCreate()
        usageHelper = UsageStatsHelper(applicationContext)
        createNotificationChannel()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        startForeground(NOTIFICATION_ID, createNotification())

        Log.i("UsageTrackingService", "Service starting.")

        serviceScope.coroutineContext.cancelChildren() // 既存のタスクをキャンセル
        serviceScope.launch {
            while (isActive) { // コルーチンがアクティブな間ループ
                Log.d("UsageTrackingService", "Updating usage data in background...")
                try {
                    // UsageStatsHelperのメソッドを呼び出してデータを更新・保存
                    usageHelper.updateCumulativeUsage()
                } catch (e: Exception) {
                    Log.e("UsageTrackingService", "Error updating usage data", e)
                }
                delay(TRACKING_INTERVAL_MS)
            }
        }

        return START_STICKY
    }

    override fun onDestroy() {
        super.onDestroy()
        serviceScope.cancel() // サービス破棄時にコルーチンをキャンセル
        Log.i("UsageTrackingService", "Service destroyed.")
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private fun createNotification(): Notification {
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        return NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("利用状況を記録中")
            .setContentText("アプリの利用状況をバックグラウンドで記録しています。")
            // 【修正箇所】ic_launcher から、新しく作成した通知用アイコンに変更します
            .setSmallIcon(R.drawable.ic_notification_tracking_24)
            .setContentIntent(pendingIntent)
            .setOngoing(true) // 通知をユーザーが消せないようにする
            .build()
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID,
                "Usage Tracking Service Channel",
                NotificationManager.IMPORTANCE_MIN
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager.createNotificationChannel(serviceChannel)
        }
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/WeeklyUsageDetailsActivity.kt">
package WTAY.screen_app_u22

import com.google.android.material.appbar.MaterialToolbar
import android.content.pm.PackageManager
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import java.util.*
import java.util.concurrent.TimeUnit

class WeeklyUsageDetailsActivity : AppCompatActivity() {

    private lateinit var usageHelper: UsageStatsHelper
    private lateinit var weeklyUsageRecyclerView: RecyclerView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_weekly_usage_details)

        val toolbar = findViewById<MaterialToolbar>(R.id.detailsToolbar)
        setSupportActionBar(toolbar)

        // ▼▼▼ タイトル設定を修正 ▼▼▼
        supportActionBar?.title = "今週のアプリ利用履歴"
        supportActionBar?.setDisplayHomeAsUpEnabled(true)

        usageHelper = UsageStatsHelper(this)
        weeklyUsageRecyclerView = findViewById(R.id.weeklyUsageRecyclerView)
        weeklyUsageRecyclerView.layoutManager = LinearLayoutManager(this)

        displayWeeklyUsageDetails()
    }

    private fun displayWeeklyUsageDetails() {
        val calendar = Calendar.getInstance()
        val endTime = System.currentTimeMillis()

        // ▼▼▼ 開始時刻を「今週の月曜0時」に変更 ▼▼▼
        calendar.firstDayOfWeek = Calendar.MONDAY
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
        calendar.set(Calendar.HOUR_OF_DAY, 0)
        calendar.set(Calendar.MINUTE, 0)
        calendar.set(Calendar.SECOND, 0)
        calendar.set(Calendar.MILLISECOND, 0)
        val startTime = calendar.timeInMillis

        val dailyStatsOverWeek = usageHelper.getAppUsageStats(startTime, endTime)

        val weeklyAggregatedStats = mutableMapOf<String, Long>()
        dailyStatsOverWeek.forEach { stat ->
            val currentTotal = weeklyAggregatedStats.getOrDefault(stat.packageName, 0L)
            weeklyAggregatedStats[stat.packageName] = currentTotal + stat.totalTimeInForeground
        }

        val displayList = weeklyAggregatedStats.mapNotNull { entry ->
            getAppNameFromPackage(entry.key)?.let { appName ->
                AppUsageDisplayItem(entry.key, appName, entry.value)
            }
        }
            .filter { it.totalTimeInForeground > 0 }
            .sortedByDescending { it.totalTimeInForeground }

        val adapter = UsageListAdapter(this, displayList)
        weeklyUsageRecyclerView.adapter = adapter
    }

    private fun getAppNameFromPackage(packageName: String): String? {
        return try {
            val packageManager = applicationContext.packageManager
            val applicationInfo = packageManager.getApplicationInfo(packageName, 0)
            packageManager.getApplicationLabel(applicationInfo).toString()
        } catch (e: PackageManager.NameNotFoundException) {
            null
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        onBackPressedDispatcher.onBackPressed()
        return true
    }
}
</file>

<file path="app/src/main/res/drawable/ic_add_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M440,520L200,520L200,440L440,440L440,200L520,200L520,440L760,440L760,520L520,520L520,760L440,760L440,520Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/ic_arrow_back_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
        
    <path android:fillColor="#FF000000" android:pathData="M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/ic_event_note_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
        
    <path android:fillColor="#FF000000" android:pathData="M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/ic_launcher_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_launcher_foreground.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
</file>

<file path="app/src/main/res/drawable/ic_notification_tracking_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M280,680L360,680L360,480L280,480L280,680ZM600,680L680,680L680,280L600,280L600,680ZM440,680L520,680L520,560L440,560L440,680ZM440,480L520,480L520,400L440,400L440,480ZM200,840Q167,840 143.5,816.5Q120,793 120,760L120,200Q120,167 143.5,143.5Q167,120 200,120L760,120Q793,120 816.5,143.5Q840,167 840,200L840,760Q840,793 816.5,816.5Q793,840 760,840L200,840ZM200,760L760,760Q760,760 760,760Q760,760 760,760L760,200Q760,200 760,200Q760,200 760,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760ZM200,200L200,200Q200,200 200,200Q200,200 200,200L200,760Q200,760 200,760Q200,760 200,760L200,760Q200,760 200,760Q200,760 200,760L200,200Q200,200 200,200Q200,200 200,200Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/ic_settings_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
        
    <path android:fillColor="#FF000000" android:pathData="M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z"/>
    
</vector>
</file>

<file path="app/src/main/res/drawable/ic_update_24.xml">
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
        
    <path android:fillColor="#FF000000" android:pathData="M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z"/>
    
</vector>
</file>

<file path="app/src/main/res/layout/activity_alert_settings.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".AlertSettingsActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="アラート設定"
            app:navigationIcon="@drawable/ic_arrow_back_24" />
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        tools:listitem="@layout/item_alert_setting" />

    <TextView
        android:id="@+id/emptyView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="設定済みのアラートはありません。\n右下のボタンから追加してください。"
        android:layout_gravity="center"
        android:gravity="center"
        android:textAppearance="?attr/textAppearanceBodyLarge"
        android:visibility="gone"/>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/fab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="16dp"
        android:contentDescription="アラートを追加"
        app:srcCompat="@android:drawable/ic_input_add" />
    <!-- ic_add_24.xml がなければ、標準のアイコンで代用 -->

</androidx.coordinatorlayout.widget.CoordinatorLayout>
</file>

<file path="app/src/main/res/layout/activity_daily_usage_details.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface"
    tools:context=".DailyUsageDetailsActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Theme.screen_app_u22.Toolbar">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/detailsToolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_arrow_back_24" />
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/dailyUsageRecyclerView"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingTop="8dp"
    android:paddingBottom="8dp"
    android:clipToPadding="false"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:listitem="@layout/item_usage_stat"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>
</file>

<file path="app/src/main/res/layout/activity_monthly_usage_details.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface"
    tools:context=".DailyUsageDetailsActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Theme.screen_app_u22.Toolbar">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/detailsToolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_arrow_back_24" />
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/monthlyUsageRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:paddingTop="8dp"
        android:paddingBottom="8dp"
        android:clipToPadding="false"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        tools:listitem="@layout/item_usage_stat"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>
</file>

<file path="app/src/main/res/layout/activity_weekly_usage_details.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface"
    tools:context=".DailyUsageDetailsActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Theme.screen_app_u22.Toolbar">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/detailsToolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:navigationIcon="@drawable/ic_arrow_back_24" />
    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/weeklyUsageRecyclerView"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingTop="8dp"
    android:paddingBottom="8dp"
    android:clipToPadding="false"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:listitem="@layout/item_usage_stat"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>
</file>

<file path="app/src/main/res/mipmap-anydpi/ic_launcher_round.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/mipmap-anydpi/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
</file>

<file path="app/src/main/res/values/colors.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- 基本色 -->
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>

    <!-- Material 3 Theme Colors (例) -->
    <color name="md_theme_primary">#00658E</color>
    <color name="md_theme_onPrimary">#FFFFFF</color>
    <color name="md_theme_primaryContainer">#C7E7FF</color>
    <color name="md_theme_onPrimaryContainer">#001E2E</color>
    <color name="md_theme_secondary">#4F616E</color>
    <color name="md_theme_onSecondary">#FFFFFF</color>
    <color name="md_theme_secondaryContainer">#D2E5F5</color>
    <color name="md_theme_onSecondaryContainer">#0B1D29</color>
    <color name="md_theme_tertiary">#64597B</color>
    <color name="md_theme_onTertiary">#FFFFFF</color>
    <color name="md_theme_tertiaryContainer">#EADDFF</color>
    <color name="md_theme_onTertiaryContainer">#1F1635</color>
    <color name="md_theme_error">#BA1A1A</color>
    <color name="md_theme_onError">#FFFFFF</color>
    <color name="md_theme_errorContainer">#FFDAD6</color>
    <color name="md_theme_onErrorContainer">#410002</color>
    <color name="md_theme_background">#FCFCFF</color>
    <color name="md_theme_onBackground">#191C1E</color>
    <color name="md_theme_surface">#FCFCFF</color>
    <color name="md_theme_onSurface">#191C1E</color>
    <color name="md_theme_surfaceVariant">#DDE3EA</color>
    <color name="md_theme_onSurfaceVariant">#41484D</color>
    <color name="md_theme_outline">#71787E</color>
    <color name="md_theme_inverseOnSurface">#F0F1F3</color>
    <color name="md_theme_inverseSurface">#2E3133</color>
    <color name="md_theme_inversePrimary">#86CFFF</color>
    <color name="md_theme_shadow">#000000</color>
    <color name="md_theme_surfaceTint">#00658E</color>
    <color name="md_theme_outlineVariant">#C1C7CE</color>
    <color name="md_theme_scrim">#000000</color>

    <!-- Custom colors for text -->
    <color name="text_primary_on_light">#DD000000</color> <!-- 87% Black -->
    <color name="text_secondary_on_light">#8A000000</color> <!-- 54% Black -->
</resources>
</file>

<file path="app/src/main/res/values/strings.xml">
<resources>
    <string name="app_name">見えるくん</string>
    <string name="title_activity_main.xml">activity_main.xml</string>
    <string name="cumulative_usage_time_label">累計使用時間：</string>
    <string name="updating_label">更新中…</string>
    <string name="permission_required_label">権限が必要です</string>
    <string name="time_unit_hour">時間</string>
    <string name="time_unit_minute">分</string>
    <string name="less_than_a_minute">&lt; 1分</string>
</resources>
</file>

<file path="app/src/main/res/values/themes.xml">
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.screen_app_u22" parent="Theme.Material3.DayNight.NoActionBar">
        <item name="colorPrimary">@color/md_theme_primary</item>
        <item name="colorOnPrimary">@color/md_theme_onPrimary</item>
        <item name="colorPrimaryContainer">@color/md_theme_primaryContainer</item>
        <item name="colorOnPrimaryContainer">@color/md_theme_onPrimaryContainer</item>
        <item name="colorSecondary">@color/md_theme_secondary</item>
        <item name="colorOnSecondary">@color/md_theme_onSecondary</item>
        <item name="colorSecondaryContainer">@color/md_theme_secondaryContainer</item>
        <item name="colorOnSecondaryContainer">@color/md_theme_onSecondaryContainer</item>
        <item name="colorTertiary">@color/md_theme_tertiary</item>
        <item name="colorOnTertiary">@color/md_theme_onTertiary</item>
        <item name="colorTertiaryContainer">@color/md_theme_tertiaryContainer</item>
        <item name="colorOnTertiaryContainer">@color/md_theme_onTertiaryContainer</item>
        <item name="colorError">@color/md_theme_error</item>
        <item name="colorOnError">@color/md_theme_onError</item>
        <item name="colorErrorContainer">@color/md_theme_errorContainer</item>
        <item name="colorOnErrorContainer">@color/md_theme_onErrorContainer</item>
        <item name="android:colorBackground">@color/md_theme_background</item>
        <item name="colorOnBackground">@color/md_theme_onBackground</item>
        <item name="colorSurface">@color/md_theme_surface</item>
        <item name="colorOnSurface">@color/md_theme_onSurface</item>
        <item name="colorSurfaceVariant">@color/md_theme_surfaceVariant</item>
        <item name="colorOnSurfaceVariant">@color/md_theme_onSurfaceVariant</item>
        <item name="colorOutline">@color/md_theme_outline</item>
        <item name="colorOnSurfaceInverse">@color/md_theme_inverseOnSurface</item>
        <item name="colorSurfaceInverse">@color/md_theme_inverseSurface</item>
        <item name="colorPrimaryInverse">@color/md_theme_inversePrimary</item>

        <!-- Status bar color -->
        <item name="android:statusBarColor">?attr/colorSurface</item>
        <item name="android:windowLightStatusBar" tools:targetApi="m">true</item>

        <!-- Typography -->
        <item name="textAppearanceHeadlineLarge">@style/TextAppearance.App.HeadlineLarge</item>
        <item name="textAppearanceHeadlineMedium">@style/TextAppearance.App.HeadlineMedium</item>
        <item name="textAppearanceTitleLarge">@style/TextAppearance.App.TitleLarge</item>
        <item name="textAppearanceTitleMedium">@style/TextAppearance.App.TitleMedium</item>
        <item name="textAppearanceBodyLarge">@style/TextAppearance.App.BodyLarge</item>
        <item name="textAppearanceBodyMedium">@style/TextAppearance.App.BodyMedium</item>
        <item name="textAppearanceLabelLarge">@style/TextAppearance.App.LabelLarge</item>

        <!-- Shape -->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.App.MediumComponent</item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.App.LargeComponent</item>

        <!-- Material Button Style -->
        <item name="materialButtonStyle">@style/Widget.App.Button</item>
    </style>

    <style name="Theme.screen_app_u22" parent="Base.Theme.screen_app_u22" />

    <style name="TextAppearance.App.HeadlineLarge" parent="TextAppearance.Material3.HeadlineLarge" />
    <style name="TextAppearance.App.HeadlineMedium" parent="TextAppearance.Material3.HeadlineMedium" />
    <style name="TextAppearance.App.TitleLarge" parent="TextAppearance.Material3.TitleLarge">
        <item name="android:textStyle">bold</item>
    </style>
    <style name="TextAppearance.App.TitleMedium" parent="TextAppearance.Material3.TitleMedium" />
    <style name="TextAppearance.App.BodyLarge" parent="TextAppearance.Material3.BodyLarge" />
    <style name="TextAppearance.App.BodyMedium" parent="TextAppearance.Material3.BodyMedium" />
    <style name="TextAppearance.App.LabelLarge" parent="TextAppearance.Material3.LabelLarge" />


    <!-- Shape Styles -->
    <style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.Material3.SmallComponent">
        <item name="cornerSize">8dp</item>
    </style>
    <style name="ShapeAppearance.App.MediumComponent" parent="ShapeAppearance.Material3.MediumComponent">
        <item name="cornerSize">12dp</item>
    </style>
    <style name="ShapeAppearance.App.LargeComponent" parent="ShapeAppearance.Material3.LargeComponent">
        <item name="cornerSize">16dp</item>
    </style>

    <!-- Custom Button Style -->
    <style name="Widget.App.Button" parent="Widget.Material3.Button">
        <item name="android:paddingTop">12dp</item>
        <item name="android:paddingBottom">12dp</item>
        <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>
    </style>

    <style name="Widget.App.Button.Outlined" parent="Widget.Material3.Button.OutlinedButton">
        <item name="android:paddingTop">12dp</item>
        <item name="android:paddingBottom">12dp</item>
        <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>
    </style>

    <style name="Widget.App.Button.Text" parent="Widget.Material3.Button.TextButton">
        <item name="android:paddingTop">12dp</item>
        <item name="android:paddingBottom">12dp</item>
    </style>

    <!-- Toolbar theme -->
    <style name="Theme.screen_app_u22.Toolbar" parent="ThemeOverlay.Material3.ActionBar">
        <item name="android:textColorPrimary">?attr/colorOnSurface</item>
        <item name="actionMenuTextColor">?attr/colorOnSurface</item>
        <item name="colorControlNormal">?attr/colorOnSurface</item>
    </style>

</resources>
</file>

<file path="app/src/main/res/xml/backup_rules.xml">
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>
</file>

<file path="app/src/main/res/xml/data_extraction_rules.xml">
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>
</file>

<file path="app/src/test/java/WTAY/screen_app_u22/ExampleUnitTest.kt">
package WTAY.screen_app_u22

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
</file>

<file path="gradle.properties">
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
</file>

<file path="gradlew">
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="settings.gradle.kts">
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Screen_app_U22"
include(":app")
</file>

<file path="app/build.gradle.kts">
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
}

android {
    namespace = "WTAY.screen_app_u22"
    compileSdk = 35

    defaultConfig {
        applicationId = "WTAY.screen_app_u22"
        minSdk = 35
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {

    implementation("com.google.code.gson:gson:2.10.1")
    implementation("androidx.datastore:datastore-preferences:1.1.1")
    implementation("androidx.datastore:datastore-preferences-core:1.1.1")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("com.google.android.material:material:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.recyclerview:recyclerview:1.3.2")
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
    ksp(libs.androidx.room.compiler)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/AppUsageDisplayItem.kt">
package WTAY.screen_app_u22

data class AppUsageDisplayItem(
    val packageName: String,
    val appName: String,
    val totalTimeInForeground: Long
)
//a
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/UsageListAdapter.kt">
package WTAY.screen_app_u22

import android.content.Context
import android.content.pm.PackageManager
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.ProgressBar
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import java.util.concurrent.TimeUnit

class UsageListAdapter(private val context: Context, private val usageStatsList: List<AppUsageDisplayItem>) :
    RecyclerView.Adapter<UsageListAdapter.ViewHolder>() {

    // リスト内の最大利用時間を保持
    private val maxUsageTime = usageStatsList.maxOfOrNull { it.totalTimeInForeground } ?: 1L

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val appIconImageView: ImageView = view.findViewById(R.id.appIconImageView)
        val appNameTextView: TextView = view.findViewById(R.id.textViewAppName)
        val packageNameTextView: TextView = view.findViewById(R.id.textViewPackageName)
        val usageTimeTextView: TextView = view.findViewById(R.id.textViewUsageTime)
        val usageProgressBar: ProgressBar = view.findViewById(R.id.usageProgressBar) // ProgressBar
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.item_usage_stat, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val item = usageStatsList[position]
        holder.appNameTextView.text = item.appName
        holder.packageNameTextView.text = item.packageName
        holder.usageTimeTextView.text = formatMillisToHoursMinutes(item.totalTimeInForeground)

        try {
            val icon: Drawable = context.packageManager.getApplicationIcon(item.packageName)
            holder.appIconImageView.setImageDrawable(icon)
        } catch (e: PackageManager.NameNotFoundException) {
            holder.appIconImageView.setImageResource(R.mipmap.ic_launcher) // Default icon
        }

        // プログレスバーの値を設定
        val progress = (item.totalTimeInForeground * 100 / maxUsageTime).toInt()
        holder.usageProgressBar.progress = progress
    }

    override fun getItemCount() = usageStatsList.size

    private fun formatMillisToHoursMinutes(millis: Long): String {
        val hours = TimeUnit.MILLISECONDS.toHours(millis)
        val minutes = TimeUnit.MILLISECONDS.toMinutes(millis) % 60
        return when {
            hours > 0 -> "${hours}時間 ${minutes}分"
            minutes > 0 -> "${minutes}分"
            millis > 0 -> "< 1分"
            else -> "0分"
        }
    }
}
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/UsageStatsHelper.kt">
// app/src/main/java/WTAY/screen_app_u22/UsageStatsHelper.kt
package WTAY.screen_app_u22

import android.app.usage.UsageEvents
import android.app.usage.UsageStats
import android.app.usage.UsageStatsManager
import android.content.Context
import android.content.pm.PackageManager
import WTAY.screen_app_u22.db.AppDatabase // RoomのDBをインポート
import WTAY.screen_app_u22.db.AppUsageEntity // RoomのEntityをインポート
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.util.*
import java.util.concurrent.TimeUnit
import android.content.pm.ApplicationInfo

class UsageStatsHelper(private val context: Context) {

    // ▼▼▼ DataStoreの代わりに、AppDatabase(Room)とAppPreferencesを使うように変更 ▼▼▼
    private val appUsageDao = AppDatabase.getInstance(context).appUsageDao()
    private val appPreferences = AppPreferences(context)
    // ▲▲▲ ここまで変更 ▲▲▲

    private val usageStatsManager = context.getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager
    private val packageManager: PackageManager = context.packageManager

    private fun isUserApp(packageName: String): Boolean {
        // 自分のアプリは除外する
        if (packageName == context.packageName) {
            return false
        }
        return try {
            val appInfo = packageManager.getApplicationInfo(packageName, 0)
            val isSystemApp = appInfo.flags and ApplicationInfo.FLAG_SYSTEM != 0
            val isUpdatedSystemApp = appInfo.flags and ApplicationInfo.FLAG_UPDATED_SYSTEM_APP != 0
            val hasLaunchIntent = packageManager.getLaunchIntentForPackage(packageName) != null

            // ランチャーから起動可能であり、かつ、
            // (非システムアプリであるか、または、更新されたシステムアプリである)
            hasLaunchIntent && (!isSystemApp || isUpdatedSystemApp)
        } catch (e: PackageManager.NameNotFoundException) {
            false
        }
    }

    fun getAppUsageStats(startTime: Long, endTime: Long): List<UsageStats> {
        return usageStatsManager.queryUsageStats(
            UsageStatsManager.INTERVAL_DAILY,
            startTime,
            endTime
        ).filter { it.totalTimeInForeground > 0 && isUserApp(it.packageName) }
    }

    suspend fun updateCumulativeUsage() {
        // ▼▼▼ DataStoreからAppPreferencesへの変更 ▼▼▼
        val lastUpdateTime = appPreferences.lastUpdateTime
        val currentTime = System.currentTimeMillis()

        val startTime = if (lastUpdateTime == 0L) {
            currentTime - TimeUnit.DAYS.toMillis(1)
        } else {
            lastUpdateTime
        }

        if (currentTime - startTime < TimeUnit.MINUTES.toMillis(1)) {
            return
        }

        val stats = getAppUsageStats(startTime, currentTime)
        if (stats.isEmpty()) {
            // ▼▼▼ 更新時刻だけ保存 ▼▼▼
            appPreferences.lastUpdateTime = currentTime
            return
        }

        // ▼▼▼ Roomから現在のデータを取得 ▼▼▼
        val currentData = appUsageDao.getAllUsageMap().toMutableMap()


        stats.forEach { stat ->
            val currentTotal = currentData.getOrDefault(stat.packageName, 0L)
            currentData[stat.packageName] = currentTotal + stat.totalTimeInForeground
        }

        // ▼▼▼ Roomにデータを保存し、最終更新時刻も保存 ▼▼▼
        val entitiesToUpdate = currentData.map { (packageName, time) ->
            AppUsageEntity(packageName, time)
        }
        appUsageDao.upsertAll(entitiesToUpdate)
        appPreferences.lastUpdateTime = currentTime
    }

    suspend fun getAllAppsTotalUsageTime(): Long {
        // ▼▼▼ DBから取得した全データに対してフィルタリングを適用 ▼▼▼
        val allData = appUsageDao.getAll()
        var totalTime = 0L
        allData.forEach { entity ->
            if (isUserApp(entity.packageName)) {
                totalTime += entity.usageTime
            }
        }
        return totalTime
    }

    /**
     * 今日のハイライト（最多起動アプリ、時間帯別最長利用アプリ）を分析する
     */
    suspend fun analyzeTodayHighlights(): TodayHighlight {
        return withContext(Dispatchers.IO) {
            val calendar = Calendar.getInstance()
            calendar.set(Calendar.HOUR_OF_DAY, 0)
            calendar.set(Calendar.MINUTE, 0)
            calendar.set(Calendar.SECOND, 0)
            calendar.set(Calendar.MILLISECOND, 0)
            val startTime = calendar.timeInMillis
            val endTime = System.currentTimeMillis()

            val usageEvents = usageStatsManager.queryEvents(startTime, endTime)

            val launchCounts = mutableMapOf<String, Int>()
            val usageTimeBySlot = mapOf(
                "morning" to mutableMapOf<String, Long>(),
                "day" to mutableMapOf<String, Long>(),
                "night" to mutableMapOf<String, Long>()
            )
            val appForegroundTimestamps = mutableMapOf<String, Long>()

            while (usageEvents.hasNextEvent()) {
                val event = UsageEvents.Event()
                usageEvents.getNextEvent(event)

                if (!isUserApp(event.packageName)) continue

                if (event.eventType == UsageEvents.Event.MOVE_TO_FOREGROUND) {
                    val count = launchCounts.getOrDefault(event.packageName, 0)
                    launchCounts[event.packageName] = count + 1
                }

                when (event.eventType) {
                    UsageEvents.Event.MOVE_TO_FOREGROUND -> {
                        appForegroundTimestamps[event.packageName] = event.timeStamp
                    }
                    UsageEvents.Event.MOVE_TO_BACKGROUND -> {
                        val foregroundTime = appForegroundTimestamps[event.packageName]
                        if (foregroundTime != null) {
                            val duration = event.timeStamp - foregroundTime
                            if (duration > 0) {
                                val slot = getTimeSlot(foregroundTime)
                                val currentDuration = usageTimeBySlot[slot]!!.getOrDefault(event.packageName, 0L)
                                usageTimeBySlot[slot]!![event.packageName] = currentDuration + duration
                            }
                            appForegroundTimestamps.remove(event.packageName)
                        }
                    }
                }
            }

            val mostLaunchedEntry = launchCounts.maxByOrNull { it.value }
            val mostLaunchedApp = mostLaunchedEntry?.let {
                AppInfo(
                    packageName = it.key,
                    appName = getAppName(it.key),
                    launchCount = it.value
                )
            }

            val morningTop = getTopAppForSlot(usageTimeBySlot["morning"])
            val dayTop = getTopAppForSlot(usageTimeBySlot["day"])
            val nightTop = getTopAppForSlot(usageTimeBySlot["night"])
            val timeSlotUsage = TimeSlotUsage(morningTop, dayTop, nightTop)

            TodayHighlight(mostLaunchedApp, timeSlotUsage)
        }
    }

    private fun getTimeSlot(timestamp: Long): String {
        val calendar = Calendar.getInstance().apply { timeInMillis = timestamp }
        return when (calendar.get(Calendar.HOUR_OF_DAY)) {
            in 5..11 -> "morning"
            in 12..17 -> "day"
            else -> "night"
        }
    }

    private fun getTopAppForSlot(usageMap: Map<String, Long>?): AppInfo? {
        val topEntry = usageMap?.maxByOrNull { it.value }
        return topEntry?.let {
            AppInfo(
                packageName = it.key,
                appName = getAppName(it.key),
                usageTime = it.value
            )
        }
    }

    private fun getAppName(packageName: String): String {
        return try {
            val appInfo = packageManager.getApplicationInfo(packageName, 0)
            packageManager.getApplicationLabel(appInfo).toString()
        } catch (e: PackageManager.NameNotFoundException) {
            packageName
        }
    }
}
</file>

<file path="app/src/main/res/layout/item_usage_stat.xml">
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:cardElevation="2dp"
    app:cardCornerRadius="12dp"
    android:layout_marginStart="16dp"
    android:layout_marginEnd="16dp"
    android:layout_marginTop="8dp"
    android:layout_marginBottom="8dp"
    app:cardBackgroundColor="?attr/colorSurfaceContainerLowest">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="16dp"
        android:gravity="center_vertical">

        <ImageView
            android:id="@+id/appIconImageView"
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:layout_marginEnd="16dp"
            android:scaleType="fitCenter"
            tools:src="@mipmap/ic_launcher_round"
            android:contentDescription="@null"/>

        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">

            <TextView
                android:id="@+id/textViewAppName"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?attr/textAppearanceTitleMedium"
                android:textColor="?attr/colorOnSurface"
                android:maxLines="1"
                android:ellipsize="end"
                tools:text="Very Long Application Name Example"/>

            <TextView
                android:id="@+id/textViewPackageName"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:textAppearance="?attr/textAppearanceBodySmall"
                android:textColor="?attr/colorOnSurfaceVariant"
                android:maxLines="1"
                android:ellipsize="end"
                tools:text="com.example.verylong.packagename"/>

            <ProgressBar
                android:id="@+id/usageProgressBar"
                style="?android:attr/progressBarStyleHorizontal"
                android:layout_width="match_parent"
                android:layout_height="6dp"
                android:layout_marginTop="4dp"
                android:progressTint="?attr/colorPrimary"
                app:trackCornerRadius="3dp"
                tools:progress="60" />

        </LinearLayout>

        <TextView
            android:id="@+id/textViewUsageTime"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAppearance="?attr/textAppearanceBodyLarge"
            android:textColor="?attr/colorPrimary"
            android:textStyle="bold"
            android:layout_marginStart="8dp"
            tools:text="1h 23m"/>
    </LinearLayout>
</com.google.android.material.card.MaterialCardView>
</file>

<file path="build.gradle.kts">
// このファイルはプロジェクトのトップレベルのビルドファイルです。
// 各モジュールにプラグインを適用するには、モジュールレベルの build.gradle.kts ファイルを
// 使用してください。

plugins {
    // これらのプラグインは :app モジュールで適用されるため、
    // ここでは `apply false` を付けて宣言だけを行います。
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    alias(libs.plugins.ksp) apply false
}
</file>

<file path="gradle/libs.versions.toml">
[versions]
agp = "8.11.0"
kotlin = "2.2.0"
coreKtx = "1.16.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.9.1"
activityCompose = "1.10.1"
composeBom = "2025.06.01"
room = "2.7.2"
ksp = "2.2.0-2.0.2"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }


[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
#Thu Jun 12 10:02:27 JST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="app/src/main/AndroidManifest.xml">
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 既存の権限 -->
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
    <uses-permission
        android:name="android.permission.PACKAGE_USAGE_STATS"
        tools:ignore="ProtectedPermissions" />
    <uses-permission
        android:name="android.permission.QUERY_ALL_PACKAGES"
        tools:ignore="QueryAllPackagesPermission" />

    <!-- 【追加】フォアグラウンドサービスと通知のための権限 -->
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>


    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.screen_app_u22">

        <!-- 既存のアクティビティ -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity android:name=".DailyUsageDetailsActivity" android:label="今日の利用履歴" />
        <activity android:name=".WeeklyUsageDetailsActivity" android:label="今週の利用履歴" />
        <activity android:name=".MonthlyUsageDetailsActivity" android:label="今月の利用履歴" />
        <!-- 【追加】アプリ利用状況を監視するフォアグラウンドサービス -->
        <service
            android:name=".UsageTrackingService"
            android:enabled="true"
            android:exported="false"
            android:foregroundServiceType="dataSync" />

        <!-- 【追加】端末起動を検知してサービスを開始するレシーバー -->
        <receiver
            android:name=".BootReceiver"
            android:enabled="true"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
            </intent-filter>
        </receiver>

    </application>
</manifest>
</file>

<file path="app/src/main/java/WTAY/screen_app_u22/MainActivity.kt">
package WTAY.screen_app_u22

import android.app.AppOpsManager
import android.content.Context
import android.content.Intent
import android.os.Binder
import android.os.Bundle
import android.provider.Settings
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.card.MaterialCardView
import kotlinx.coroutines.launch
import java.util.concurrent.TimeUnit
import WTAY.screen_app_u22.UsageStatsHelper
import android.os.Build

class MainActivity : AppCompatActivity() {

    private lateinit var usageHelper: UsageStatsHelper
    private lateinit var dailyUsageDetailsButton: Button
    private lateinit var weeklyUsageDetailsButton: Button
    private lateinit var monthlyUsageDetailsButton: Button
    private lateinit var totalUsageTextView: TextView
    private lateinit var usageButton: Button
    private lateinit var permissionButton: Button

    // ハイライト表示用のUIプロパティ
    private lateinit var highlightCard: MaterialCardView
    private lateinit var mostLaunchedLayout: LinearLayout
    private lateinit var mostLaunchedAppName: TextView
    private lateinit var timeSlotMorning: TextView
    private lateinit var timeSlotDay: TextView
    private lateinit var timeSlotNight: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val toolbar = findViewById<MaterialToolbar>(R.id.mainToolbar)
        setSupportActionBar(toolbar)

        usageHelper = UsageStatsHelper(this)

        // findViewById
        dailyUsageDetailsButton = findViewById(R.id.dailyUsageDetailsButton)
        weeklyUsageDetailsButton = findViewById(R.id.weeklyUsageDetailsButton)
        monthlyUsageDetailsButton = findViewById(R.id.monthlyUsageDetailsButton)
        totalUsageTextView = findViewById(R.id.totalUsage)
        usageButton = findViewById(R.id.usageButton)
        permissionButton = findViewById(R.id.permissionButton)

        // ハイライトUIのfindViewById
        highlightCard = findViewById(R.id.highlightCard)
        mostLaunchedLayout = findViewById(R.id.mostLaunchedLayout)
        mostLaunchedAppName = findViewById(R.id.mostLaunchedAppName)
        timeSlotMorning = findViewById(R.id.timeSlotMorning)
        timeSlotDay = findViewById(R.id.timeSlotDay)
        timeSlotNight = findViewById(R.id.timeSlotNight)

        // setOnClickListener
        dailyUsageDetailsButton.setOnClickListener {
            if (hasUsageStatsPermission()) {
                startActivity(Intent(this, DailyUsageDetailsActivity::class.java))
            } else {
                requestUsageStatsPermission()
            }
        }

        weeklyUsageDetailsButton.setOnClickListener {
            if (hasUsageStatsPermission()) {
                startActivity(Intent(this, WeeklyUsageDetailsActivity::class.java))
            } else {
                requestUsageStatsPermission()
            }
        }

        monthlyUsageDetailsButton.setOnClickListener {
            if (hasUsageStatsPermission()) {
                startActivity(Intent(this, MonthlyUsageDetailsActivity::class.java))
            } else {
                requestUsageStatsPermission()
            }
        }

        usageButton.setOnClickListener {
            if (hasUsageStatsPermission()) {
                updateAndDisplayData()
            } else {
                requestUsageStatsPermission()
            }
        }

        permissionButton.setOnClickListener {
            requestUsageStatsPermission()
        }

        if (hasUsageStatsPermission()) {
            startTrackingService()
        }


    }

    override fun onResume() {
        super.onResume()
        if (hasUsageStatsPermission()) {
            updateAndDisplayData()
        } else {
            totalUsageTextView.text = "累計使用時間：権限が必要です"
            highlightCard.visibility = View.GONE
        }
    }

    private fun startTrackingService() {
        val serviceIntent = Intent(this, UsageTrackingService::class.java)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(serviceIntent)
        } else {
            startService(serviceIntent)
        }
    }

    private fun updateAndDisplayData() {
        lifecycleScope.launch {
            totalUsageTextView.text = getString(R.string.cumulative_usage_time_label) + getString(R.string.updating_label)
            highlightCard.visibility = View.GONE

            // 累計時間の更新と表示
            usageHelper.updateCumulativeUsage()
            val totalTime = usageHelper.getAllAppsTotalUsageTime()
            totalUsageTextView.text = "累計使用時間：${formatMillisToHoursMinutes(totalTime)}"

            // ハイライトの分析と表示
            val highlights = usageHelper.analyzeTodayHighlights()
            displayHighlights(highlights)
        }
    }

    private fun displayHighlights(highlights: TodayHighlight) {
        var isHighlightAvailable = false

        // 最多起動アプリの表示
        highlights.mostLaunchedApp?.let {
            if (it.launchCount > 0) {
                mostLaunchedAppName.text = "${it.appName} (${it.launchCount}回)"
                mostLaunchedLayout.visibility = View.VISIBLE
                isHighlightAvailable = true
            } else {
                mostLaunchedLayout.visibility = View.GONE
            }
        } ?: run { mostLaunchedLayout.visibility = View.GONE }

        // 時間帯別利用の表示
        val ts = highlights.timeSlotUsage
        ts.morning?.let {
            if(it.usageTime > 0) {
                timeSlotMorning.text = "朝：${it.appName} (${formatMillisToHoursMinutes(it.usageTime)})"
                timeSlotMorning.visibility = View.VISIBLE
                isHighlightAvailable = true
            } else {
                timeSlotMorning.visibility = View.GONE
            }
        } ?: run { timeSlotMorning.visibility = View.GONE }

        ts.day?.let {
            if(it.usageTime > 0) {
                timeSlotDay.text = "昼：${it.appName} (${formatMillisToHoursMinutes(it.usageTime)})"
                timeSlotDay.visibility = View.VISIBLE
                isHighlightAvailable = true
            } else {
                timeSlotDay.visibility = View.GONE
            }
        } ?: run { timeSlotDay.visibility = View.GONE }

        ts.night?.let {
            if(it.usageTime > 0) {
                timeSlotNight.text = "夜：${it.appName} (${formatMillisToHoursMinutes(it.usageTime)})"
                timeSlotNight.visibility = View.VISIBLE
                isHighlightAvailable = true
            } else {
                timeSlotNight.visibility = View.GONE
            }
        } ?: run { timeSlotNight.visibility = View.GONE }

        // 何か一つでも表示する情報があればカード全体を表示
        if (isHighlightAvailable) {
            highlightCard.visibility = View.VISIBLE
        }
    }

    private fun hasUsageStatsPermission(): Boolean {
        val appOps = getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager
        val mode = appOps.checkOpNoThrow(
            AppOpsManager.OPSTR_GET_USAGE_STATS,
            Binder.getCallingUid(),
            packageName
        )
        return mode == AppOpsManager.MODE_ALLOWED
    }

    private fun requestUsageStatsPermission() {
        startActivity(Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS))
    }

    private fun formatMillisToHoursMinutes(millis: Long): String {
        val hours = TimeUnit.MILLISECONDS.toHours(millis)
        val minutes = TimeUnit.MILLISECONDS.toMinutes(millis) % 60
        return when {
            hours > 0 -> "${hours}時間 ${minutes}分"
            minutes > 0 -> "${minutes}分"
            millis > 0 -> "< 1分"
            else -> "0分"
        }
    }
}
</file>

<file path="app/src/main/res/layout/activity_main.xml">
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface"
    tools:context=".MainActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBarLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/Theme.screen_app_u22.Toolbar">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/mainToolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="@string/app_name" />
    </com.google.android.material.appbar.AppBarLayout>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:paddingStart="24dp"
            android:paddingEnd="24dp"
            android:paddingBottom="24dp"
            android:paddingTop="24dp">

            <TextView
                android:id="@+id/titleText"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="見えるくん 📱"
                android:textAppearance="?attr/textAppearanceHeadlineMedium"
                android:textColor="?attr/colorPrimary"
                android:layout_gravity="center_horizontal"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="32dp"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/dailyUsageDetailsButton"
                style="@style/Widget.App.Button"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="今日のアプリ利用詳細"
                app:icon="@drawable/ic_event_note_24"
                android:layout_marginBottom="16dp"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/weeklyUsageDetailsButton"
                style="@style/Widget.App.Button.Outlined"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:icon="@drawable/ic_event_note_24"
                android:text="今週の利用状況詳細"
                android:layout_marginBottom="16dp"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/monthlyUsageDetailsButton"
                style="@style/Widget.App.Button"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:icon="@drawable/ic_event_note_24"
                android:text="今月の利用状況詳細"
                android:layout_marginBottom="16dp"/>

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:layout_marginTop="16dp"
                android:layout_marginBottom="16dp">

                <!-- 今日の合計時間カード -->
                <com.google.android.material.card.MaterialCardView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:layout_marginEnd="8dp"
                    app:cardElevation="2dp"
                    app:cardCornerRadius="12dp">
                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical"
                        android:padding="16dp">
                        <TextView
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:text="今日の合計"
                            android:textAppearance="?attr/textAppearanceTitleMedium"/>
                        <TextView
                            android:id="@+id/todayTotalUsage"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            tools:text="3時間 15分"
                            android:textAppearance="?attr/textAppearanceHeadlineSmall"
                            android:textColor="?attr/colorPrimary"/>
                    </LinearLayout>
                </com.google.android.material.card.MaterialCardView>

                <!-- 累計使用時間カード -->
                <com.google.android.material.card.MaterialCardView
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:layout_marginStart="8dp"
                    app:cardElevation="2dp"
                    app:cardCornerRadius="12dp">
                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical"
                        android:padding="16dp">
                        <TextView
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:text="累計使用時間"
                            android:textAppearance="?attr/textAppearanceTitleMedium"/>
                        <TextView
                            android:id="@+id/totalUsage"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            tools:text="123時間 45分"
                            android:textAppearance="?attr/textAppearanceHeadlineSmall"
                            android:textColor="?attr/colorPrimary"/>
                    </LinearLayout>
                </com.google.android.material.card.MaterialCardView>
            </LinearLayout>


            <com.google.android.material.card.MaterialCardView
                android:id="@+id/highlightCard"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:cardElevation="2dp"
                app:cardCornerRadius="12dp"
                android:layout_marginTop="16dp"
                android:visibility="gone"
                tools:visibility="visible">

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">

                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="今日のハイライト"
                        android:textAppearance="?attr/textAppearanceTitleMedium"
                        android:layout_marginBottom="16dp"/>

                    <!-- 最多起動アプリ -->
                    <LinearLayout
                        android:id="@+id/mostLaunchedLayout"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="horizontal"
                        android:gravity="center_vertical"
                        android:layout_marginBottom="12dp">

                        <ImageView
                            android:layout_width="24dp"
                            android:layout_height="24dp"
                            android:src="@drawable/ic_update_24"
                            app:tint="?attr/colorPrimary"
                            android:contentDescription="@null"/>

                        <TextView
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            android:text="一番起動したアプリ"
                            android:textAppearance="?attr/textAppearanceBodyMedium"
                            android:layout_marginStart="8dp"/>

                        <View
                            android:layout_width="0dp"
                            android:layout_height="0dp"
                            android:layout_weight="1"/>

                        <TextView
                            android:id="@+id/mostLaunchedAppName"
                            android:layout_width="wrap_content"
                            android:layout_height="wrap_content"
                            tools:text="アプリ名 (15回)"
                            android:textStyle="bold"
                            android:textAppearance="?attr/textAppearanceBodyMedium"/>
                    </LinearLayout>

                    <!-- 時間帯別利用 -->
                    <TextView
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="時間帯ごとの利用"
                        android:textAppearance="?attr/textAppearanceBodyMedium"
                        android:layout_marginTop="8dp"
                        android:layout_marginBottom="8dp"/>

                    <TextView
                        android:id="@+id/timeSlotMorning"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:drawableStart="@drawable/ic_event_note_24"
                        android:drawablePadding="8dp"
                        android:gravity="center_vertical"
                        tools:text="朝：YouTube (1時間20分)"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/timeSlotDay"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:drawableStart="@drawable/ic_event_note_24"
                        android:drawablePadding="8dp"
                        android:gravity="center_vertical"
                        tools:text="昼：X (45分)"
                        android:layout_marginBottom="4dp"/>

                    <TextView
                        android:id="@+id/timeSlotNight"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:drawableStart="@drawable/ic_event_note_24"
                        android:drawablePadding="8dp"
                        android:gravity="center_vertical"
                        tools:text="夜：Netflix (2時間5分)"/>

                </LinearLayout>
            </com.google.android.material.card.MaterialCardView>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/usageButton"
                style="@style/Widget.App.Button.Text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                android:text="使用状況を更新"
                app:icon="@drawable/ic_update_24"
                android:layout_marginTop="32dp"
                android:layout_marginBottom="8dp"/>



            <com.google.android.material.button.MaterialButton
                android:id="@+id/permissionButton"
                style="@style/Widget.App.Button.Text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center_horizontal"
                app:icon="@drawable/ic_settings_24"
                android:text="アクセス許可を設定"/>

        </LinearLayout>
    </ScrollView>
</androidx.coordinatorlayout.widget.CoordinatorLayout>
</file>

</files>
